from logging import exception
import math
import torch
#from torch._C import int64
import torch.nn as nn
import torch.nn.functional as F

import copy
from typing import Tuple, Optional, Any

from torch import Tensor
from torch.nn import functional as F
from torch.nn.modules.module import Module
from torch.nn.modules.container import ModuleList
from torch.nn.init import xavier_uniform_
from torch.nn.modules.dropout import Dropout
from torch.nn.modules.linear import Linear
from torch.nn.modules.normalization import LayerNorm

from typing import  Optional
from torch.nn.modules.linear import _LinearWithBias
from torch.nn.init import constant_
from torch.nn.init import xavier_normal_
from torch.nn.parameter import Parameter

from torch.utils.checkpoint import checkpoint #as ckpt

checkpointed = True

def ckpt(f,inp):
    if checkpointed:
        return checkpoint(f,inp)
    else:
        return f(inp)

from pytorch_model_summary import summary

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
#device = torch.device("cpu")

torch.autograd.set_detect_anomaly(True)
#scaler = torch.cuda.amp.GradScaler()

class MultiheadAttention(Module):
    r"""Allows the model to jointly attend to information
    from different representation subspaces.
    See reference: Attention Is All You Need

    .. math::
        \text{MultiHead}(Q, K, V) = \text{Concat}(head_1,\dots,head_h)W^O
        \text{where} head_i = \text{Attention}(QW_i^Q, KW_i^K, VW_i^V)

    Args:
        embed_dim: total dimension of the model.
        num_heads: parallel attention heads.
        dropout: a Dropout layer on attn_output_weights. Default: 0.0.
        bias: add bias as module parameter. Default: True.
        add_bias_kv: add bias to the key and value sequences at dim=0.
        add_zero_attn: add a new batch of zeros to the key and
                       value sequences at dim=1.
        kdim: total number of features in key. Default: None.
        vdim: total number of features in value. Default: None.

        Note: if kdim and vdim are None, they will be set to embed_dim such that
        query, key, and value have the same number of features.

    Examples::

        >>> multihead_attn = nn.MultiheadAttention(embed_dim, num_heads)
        >>> attn_output, attn_output_weights = multihead_attn(query, key, value)
    """
    bias_k: Optional[torch.Tensor]
    bias_v: Optional[torch.Tensor]

    def __init__(self, embed_dim, num_heads, dropout=0., bias=True, add_bias_kv=False, add_zero_attn=False, kdim=None, vdim=None):
        super(MultiheadAttention, self).__init__()
        self.embed_dim = embed_dim
        self.kdim = kdim if kdim is not None else embed_dim
        self.vdim = vdim if vdim is not None else embed_dim
        self._qkv_same_embed_dim = self.kdim == embed_dim and self.vdim == embed_dim

        self.num_heads = num_heads
        self.dropout = dropout
        self.head_dim = embed_dim // num_heads
        assert self.head_dim * num_heads == self.embed_dim, "embed_dim must be divisible by num_heads"

        if self._qkv_same_embed_dim is False:
            self.q_proj_weight = Parameter(torch.Tensor(embed_dim, embed_dim))
            self.k_proj_weight = Parameter(torch.Tensor(embed_dim, self.kdim))
            self.v_proj_weight = Parameter(torch.Tensor(embed_dim, self.vdim))
            self.register_parameter('in_proj_weight', None)
        else:
            self.in_proj_weight = Parameter(torch.empty(3 * embed_dim, embed_dim))
            self.register_parameter('q_proj_weight', None)
            self.register_parameter('k_proj_weight', None)
            self.register_parameter('v_proj_weight', None)

        if bias:
            self.in_proj_bias = Parameter(torch.empty(3 * embed_dim))
        else:
            self.register_parameter('in_proj_bias', None)
        self.out_proj = _LinearWithBias(embed_dim, embed_dim)

        if add_bias_kv:
            self.bias_k = Parameter(torch.empty(1, 1, embed_dim))
            self.bias_v = Parameter(torch.empty(1, 1, embed_dim))
        else:
            self.bias_k = self.bias_v = None

        self.add_zero_attn = add_zero_attn

        self._reset_parameters()

    def _reset_parameters(self):
        if self._qkv_same_embed_dim:
            xavier_uniform_(self.in_proj_weight)
        else:
            xavier_uniform_(self.q_proj_weight)
            xavier_uniform_(self.k_proj_weight)
            xavier_uniform_(self.v_proj_weight)

        if self.in_proj_bias is not None:
            constant_(self.in_proj_bias, 0.)
            constant_(self.out_proj.bias, 0.)
        if self.bias_k is not None:
            xavier_normal_(self.bias_k)
        if self.bias_v is not None:
            xavier_normal_(self.bias_v)

    def __setstate__(self, state):
        # Support loading old MultiheadAttention checkpoints generated by v1.1.0
        if '_qkv_same_embed_dim' not in state:
            state['_qkv_same_embed_dim'] = True

        super(MultiheadAttention, self).__setstate__(state)

    def forward(self, query, key, value, attn_mask=None, key_padding_mask=None,
                need_weights=True ):
        # type: (Tensor, Tensor, Tensor, Optional[Tensor], bool, Optional[Tensor]) -> Tuple[Tensor, Optional[Tensor]]
        r"""
    Args:
        query, key, value: map a query and a set of key-value pairs to an output.
            See "Attention Is All You Need" for more details.
        key_padding_mask: if provided, specified padding elements in the key will
            be ignored by the attention. When given a binary mask and a value is True,
            the corresponding value on the attention layer will be ignored. When given
            a byte mask and a value is non-zero, the corresponding value on the attention
            layer will be ignored
        need_weights: output attn_output_weights.
        attn_mask: 2D or 3D mask that prevents attention to certain positions. A 2D mask will be broadcasted for all
            the batches while a 3D mask allows to specify a different mask for the entries of each batch.

    Shape:
        - Inputs:
        - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is
          the embedding dimension.
        - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is
          the embedding dimension.
        - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is
          the embedding dimension.
        - key_padding_mask: :math:`(N, S)` where N is the batch size, S is the source sequence length.
          If a ByteTensor is provided, the non-zero positions will be ignored while the position
          with the zero positions will be unchanged. If a BoolTensor is provided, the positions with the
          value of ``True`` will be ignored while the position with the value of ``False`` will be unchanged.
        - attn_mask: 2D mask :math:`(L, S)` where L is the target sequence length, S is the source sequence length.
          3D mask :math:`(N*num_heads, L, S)` where N is the batch size, L is the target sequence length,
          S is the source sequence length. attn_mask ensure that position i is allowed to attend the unmasked
          positions. If a ByteTensor is provided, the non-zero positions are not allowed to attend
          while the zero positions will be unchanged. If a BoolTensor is provided, positions with ``True``
          is not allowed to attend while ``False`` values will be unchanged. If a FloatTensor
          is provided, it will be added to the attention weight.

        - Outputs:
        - attn_output: :math:`(L, N, E)` where L is the target sequence length, N is the batch size,
          E is the embedding dimension.
        - attn_output_weights: :math:`(N, L, S)` where N is the batch size,
          L is the target sequence length, S is the source sequence length.
        """
        if not self._qkv_same_embed_dim:
            return F.multi_head_attention_forward(
                query, key, value, self.embed_dim, self.num_heads,
                self.in_proj_weight, self.in_proj_bias,
                self.bias_k, self.bias_v, self.add_zero_attn,
                self.dropout, self.out_proj.weight, self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask, need_weights=need_weights,
                attn_mask=attn_mask, use_separate_proj_weight=True,
                q_proj_weight=self.q_proj_weight, k_proj_weight=self.k_proj_weight,
                v_proj_weight=self.v_proj_weight)
        else:
            return F.multi_head_attention_forward(
                query, key, value, self.embed_dim, self.num_heads,
                self.in_proj_weight, self.in_proj_bias,
                self.bias_k, self.bias_v, self.add_zero_attn,
                self.dropout, self.out_proj.weight, self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask, need_weights=need_weights,
                attn_mask=attn_mask)

def _get_clones(module, N):
    return ModuleList([copy.deepcopy(module) for i in range(N)])

def _get_activation_fn(activation):
    if activation == "relu":
        return F.relu
    elif activation == "gelu":
        return F.gelu

    raise RuntimeError("activation should be relu/gelu, not {}".format(activation))

class TransformerEncoderLayer(Module):
    r"""Advances in
    Neural Information Processing Systems
    """

    def __init__(self, d_model, nhead, dim_feedforward=2048, dropout=0.1, activation="relu"):
        super(TransformerEncoderLayer, self).__init__()
        #self.self_attn = MultiheadAttention(d_model, nhead, dropout=dropout)
        from performer_torch import SelfAttention
        self.self_attn = SelfAttention(d_model,heads=nhead,dim_head=d_model//nhead)
        self.linear1 = Linear(d_model, dim_feedforward)
        self.dropout3 = Dropout(dropout)
        self.linear2 = Linear(dim_feedforward, d_model)

        self.linear3 = Linear(d_model, dim_feedforward)
        self.dropout4 = Dropout(dropout)
        self.linear4 = Linear(dim_feedforward, d_model)

        self.norm1 = LayerNorm(d_model)
        self.norm2 = LayerNorm(d_model)
        self.norm3 = LayerNorm(d_model)
        self.dropout1 = Dropout(dropout)
        self.dropout2 = Dropout(dropout)
        self.dropout5 = Dropout(dropout)

        self.activation1 = _get_activation_fn(activation)
        self.activation2 = _get_activation_fn(activation)

    def __setstate__(self, state):
        if 'activation' not in state:
            state['activation'] = F.relu
        super(TransformerEncoderLayer, self).__setstate__(state)

    def forward(self, src: Tensor, src_mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None) -> Tensor:

        src2 = ckpt(self.linear1,src)
        src2 = ckpt(self.activation1,src2)
        src2 = ckpt(self.dropout1,src2)
        src2 = ckpt(self.linear2,src2)
        src2 = src + self.dropout2(src2)

        src = self.norm1(src2)

        src2 = ckpt(self.self_attn,src)[0]
        src = src + self.dropout3(src2)
        src = self.norm2(src)

        src2 = ckpt(self.linear3,src)
        src2 = ckpt(self.activation2,src2)
        src2 = ckpt(self.dropout4,src2)
        src2 = ckpt(self.linear4,src2)

        src = src + self.dropout5(src2)

        src = self.norm3(src)
        return src

class TransformerEncoder(Module):
    __constants__ = ['norm']

    def __init__(self, encoder_layer, num_layers, d_model,num_parallel_layers = 3, norm=None):
        super(TransformerEncoder, self).__init__()
        self.layers = _get_clones(encoder_layer, 1)
        d_model = d_model
        self.num_parallel_layers = num_parallel_layers
        self.linear1 = nn.ModuleList([Linear(d_model, d_model).to(device) for _ in range(self.num_parallel_layers)])
        self.linear2 = nn.ModuleList([Linear(d_model, d_model).to(device) for _ in range(self.num_parallel_layers)])
        #self.enc = encoder_layer
        self.num_layers = num_layers
        self.norm = LayerNorm(d_model)
        self.norm2 = LayerNorm(d_model)
        if self.num_parallel_layers != 0:
            self.norm1 = LayerNorm(d_model)
            self.norm3 = LayerNorm(d_model)
        else:
            self.norm1 = None
            self.norm3 = None


    def forward(self, src: Tensor, mask: Optional[Tensor] = None, src_key_padding_mask: Optional[Tensor] = None) -> Tensor:
        output = src

        #for mod in self.layers:
        #    output = mod(output, src_mask=mask, src_key_padding_mask=src_key_padding_mask)

        out = []

        if self.num_parallel_layers > 0:
            for layer in self.linear1:
               out.append(self.norm1(ckpt(layer,output)+output))
        else:
            out = [src]

        for enc in self.layers:
            tmp = []
            for i in out:
                tmp.append(self.norm2(ckpt(enc,i) + i))
            out = tmp.copy()

        tmp = []
        if self.num_parallel_layers > 0:
            for i,layer in enumerate(self.linear2):
                tmp.append(self.norm3(ckpt(layer,out[i]) + out[i]))
            out = tmp.copy()
            tmp = None
            for i in out:
                if tmp is None:
                    tmp = i
                else:
                    tmp += i
            output = tmp
        else:
            output = out[0] + src

        if self.norm is not None:
            output = self.norm(output)

        return output

class TransformerModel(nn.Module):

    def __init__(self, ntoken, ninp, nhead, nhid, nlayers,num_parallel_layers = 0, dropout=0.5):
        super(TransformerModel, self).__init__()
        self.model_type = 'Transformer'
        self.pos_encoder = PositionalEncoding(ninp, dropout)
        encoder_layers = TransformerEncoderLayer(ninp, nhead, nhid, dropout)
        self.transformer_encoder = nn.ModuleList([TransformerEncoder(encoder_layers, nlayers, ninp, num_parallel_layers).to(device=device) for _ in range(nlayers)])
        self.encoder = nn.Embedding(ntoken, ninp)
        self.ninp = ninp
        self.decoder = nn.Linear(ninp, ntoken)
        self.nlayers = nlayers
        self.ffd1 = nn.Sequential(
            nn.Linear(ninp,nhid*2),
            nn.ReLU(),
            nn.Linear(nhid*2,ninp),
            nn.ReLU()
        )
        self.ffd2 = copy.deepcopy(self.ffd1)
        self.norm1 = LayerNorm(ninp)
        self.norm2 = LayerNorm(ninp)

        self.init_weights()

    def generate_square_subsequent_mask(self, sz):
        mask = (torch.triu(torch.ones(sz, sz)) == 1).transpose(0, 1)
        mask = mask.float().masked_fill(mask == 0, float('-inf')).masked_fill(mask == 1, float(0.0))
        return mask

    def init_weights(self):
        initrange = 0.1
        self.encoder.weight.data.uniform_(-initrange, initrange)
        self.decoder.bias.data.zero_()
        self.decoder.weight.data.uniform_(-initrange, initrange)

    def forward(self, src, src_mask=None):
        if src_mask is None:
            src_mask = self.generate_square_subsequent_mask(src.size(1)).to(device)
        src = ckpt(self.encoder,src) * math.sqrt(self.ninp)
        output = self.pos_encoder(src)
        output2 = ckpt(self.ffd1,output) + output
        output = ckpt(self.norm1,output2)
        for i in range(self.nlayers):
            output = self.transformer_encoder[i](output, src_mask)
        output2 = ckpt(self.ffd2,output) + output
        output = ckpt(self.norm2,output2)
        output = ckpt(self.decoder,output)
        return output


class PositionalEncoding(nn.Module):

    def __init__(self, d_model, dropout=0.1, max_len=2**17):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)

        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0)#.transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + self.pe[:, :x.size(1)]
        return self.dropout(x)


import io
import torch
from torchtext.utils import download_from_url, extract_archive
#from torchtext.data.utils import get_tokenizer
#from torchtext.vocab import build_vocab_from_iterator
from torchnlp.encoders.text import SubwordEncoder


url = 'https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-2-v1.zip'
#url = 'https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-103-v1.zip'
test_filepath, valid_filepath, train_filepath = extract_archive(download_from_url(url))
#tokenizer = get_tokenizer('basic_english')
tokenizer = SubwordEncoder(io.open(train_filepath, encoding="utf8"),target_vocab_size=50000,reserved_tokens=[
    '<pad>','<unk>','</s>','<s>','<copy>','<mask>'
])
vocab = tokenizer.vocab


def batchify(data, bsz):
    nbatch = data.size(0) // bsz
    data = data.narrow(0, 0, nbatch * bsz)
    data = data.view(bsz, -1).contiguous()
    return data.to(device)

batch_size = 1
eval_batch_size = batch_size

bptt = 2000
import random
def random_mask_encoder(data):
    rnd = random.randint
    for i in range(data.size(0)):
        for j in range(data.size(1)):
            if rnd(0,1):
                data[i,j] = data[i,j]
            else:
                data[i,j] = 5
    data = torch.tensor(data)
    data.to(device)
    return data


def get_batch(source, i, mask_input = True):
    seq_len = min(bptt, source.size(1) - 1 - i)
    data = source[:,i:i+seq_len]
    if mask_input:
        data = random_mask_encoder(data) #torch.tensor.new_full(data.size(),tokenizer.encode("<mask>"))
    target = source[:,i+1:i+1+seq_len].reshape(-1)
    return data, target

ntokens = tokenizer.vocab_size 
emsize = 512 
nhid = emsize * 4 
nlayers = 24 
nhead = 16 
num_parallel_layers = 3
dropout = 0.3 
model = TransformerModel(ntokens, emsize, nhead, nhid, nlayers,num_parallel_layers, dropout)
#print(sum(p.numel() for p in model.parameters()))
import time
date_time = str(time.asctime().replace(" ","_")).replace(":","_")
#path = "/models/"+date_time+"/model_"+str(emsize)+"_"+str(nlayers)+"_"+str(nhead)+"_"+str(num_parallel_layers)+".tar"
path = "models"+"/model_"+str(emsize)+"_"+str(nlayers)+"_"+str(nhead)+"_"+str(num_parallel_layers)+".tar"

criterion = nn.CrossEntropyLoss()
lr = 1.0 # learning rate
optimizer = torch.optim.SGD(model.parameters(), lr=lr)
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, 1.0, gamma=0.80)
epoch = 0
best_val_loss = float("inf")
best_model = model


try:
    #model.load_state_dict(torch.load(path), strict=False)
    checkpoint_ = torch.load(path, map_location=device)

    epoch = checkpoint_['epoch']
    best_val_loss = checkpoint_['best_val_loss']
    try:
        model.load_state_dict(checkpoint_['model_state_dict'],strict=False)
    except:
        try:
            model = checkpoint_['model']
        except:
            pass
    optimizer.load_state_dict(checkpoint_['optimizer_state_dict'])
    scheduler.load_state_dict(checkpoint_['scheduler_state_dict'])
    vocab = checkpoint_['vocab']
    tokenizer = checkpoint_['tokenizer']
    best_model = model
    del(checkpoint_)
    torch.cuda.empty_cache()
except Exception as e:
    print("Exception",e)
    pass


def data_process(raw_text_iter):
  data = tokenizer.encode(raw_text_iter)
  return torch.tensor(data) #torch.cat(tuple(filter(lambda t: t.numel() > 0, data)))

train_data = data_process(io.open(train_filepath, encoding="utf8").read())
val_data = data_process(io.open(valid_filepath, encoding="utf8").read())
test_data = data_process(io.open(test_filepath, encoding="utf8").read())

train_data = batchify(train_data, batch_size)
val_data = batchify(val_data, eval_batch_size)
test_data = batchify(test_data, eval_batch_size)

torch.cuda.empty_cache()


model.to(device)

print(summary(model, torch.zeros([1,1],dtype=torch.long).to(device)))


def train(resume_batch=None,step_scheduler=1024,save_intermediate_intervel=4096):
    model.train() 
    total_loss = 0.
    start_time = time.time()
    src_mask = model.generate_square_subsequent_mask(bptt).to(device)
    #optimizer.zero_grad()
    for batch, i in enumerate(range(0, train_data.size(1) - 1, bptt)):
        if resume_batch != None:
            if batch < resume_batch:
                continue
        data, targets = get_batch(train_data, i)
        
        if data.size(1) != bptt:
            src_mask = model.generate_square_subsequent_mask(data.size(1)).to(device)
        output = model(data, src_mask)
        #with torch.cuda.amp.autocast():
        loss = criterion(output.view(-1, ntokens), targets)
        #scaler.scale(loss).backward()
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), 4.0)
        optimizer.step()
        optimizer.zero_grad()
        #optimizer.step()
        #scaler.step(optimizer)
        #scaler.update()
    

        total_loss += loss.item()
        log_interval = 13
        if batch % log_interval == 0 and batch > 0 and batch != resume_batch:
            cur_loss = total_loss / log_interval
            elapsed = time.time() - start_time
            print('| epoch {:3d} | {:5d}/{:5d} batches | '
                  'lr {:04.3f} | ms/batch {:08.3f} | '
                  'loss {:5.3f} | ppl {:10.3f}'.format(
                    epoch, batch, train_data.size(1) // bptt, scheduler.get_lr()[0],
                    elapsed * 1000 / log_interval,
                    cur_loss, math.exp(cur_loss)))
            total_loss = 0
            start_time = time.time()
        if batch % save_intermediate_intervel == 0 and batch > 0:

            torch.save(
            {
                'epoch': epoch,
                'model_state_dict': best_model.state_dict(),
                #'model': best_model,
                'optimizer_state_dict': optimizer.state_dict(),
                'scheduler_state_dict': scheduler.state_dict(),
                'best_val_loss': best_val_loss,
                'vocab': vocab,
                'tokenizer': tokenizer,
            },
            path
            )
        if step_scheduler != None:
            if batch % step_scheduler == 0 and batch > 0:
                scheduler.step()

def evaluate(eval_model, data_source):
    eval_model.eval()
    total_loss = 0.
    src_mask = model.generate_square_subsequent_mask(bptt).to(device)
    with torch.no_grad():
        for i in range(0, data_source.size(1) - 1, bptt):
            data, targets = get_batch(data_source, i, mask_input = False)
            if data.size(1) != bptt:
                src_mask = model.generate_square_subsequent_mask(data.size(1)).to(device)
            output = eval_model(data, src_mask)
            output_flat = output.view(-1, ntokens)
            total_loss += data.size(1) * criterion(output_flat, targets).item()
    return total_loss / (data_source.size(1) - 1)

epochs = 10

while True:
    if epoch >= epochs:
        break
    epoch +=1
    epoch_start_time = time.time()
    train()
    val_loss = evaluate(model, val_data)
    print('-' * 95)
    print('| end of epoch {:3d} | time: {:08.3f}s | valid loss {:5.3f} | '
          'valid ppl {:10.3f}'.format(epoch, (time.time() - epoch_start_time),
                                     val_loss, math.exp(val_loss)))
    print('-' * 95)

    #scheduler.step()
    if val_loss < best_val_loss:
        best_val_loss = val_loss
        best_model = model
        #best_model = best_model.to(torch.device("cpu"))
        #best_model_state = copy.deepcopy(best_model.state_dict())
        torch.save(
            {
                'epoch': epoch,
                'model_state_dict': best_model.state_dict(),
                #'model': best_model,
                'optimizer_state_dict': optimizer.state_dict(),
                'scheduler_state_dict': scheduler.state_dict(),
                'best_val_loss': best_val_loss,
                'vocab': vocab,
                'tokenizer': tokenizer,
            },
            path
        )
#best_model = best_model.to(device)
model = best_model

test_loss = evaluate(best_model, test_data)
print('=' * 95)
print('| End of training | test loss {:5.3f} | test ppl {:10.3f}'.format(
    test_loss, math.exp(test_loss)))
print('=' * 95)


def inference(text,eval_model = best_model):
    text_input = data_process(text).unsqueeze(0).to(device)
    mask = eval_model.generate_square_subsequent_mask(text_input.size(1)).to(device)
    out = eval_model(text_input,mask).view(-1, ntokens)
    out = torch.argmax(out,dim=-1)
    result = tokenizer.decode(out)
    return [[text,result],[text_input,out]]

print(inference("Hello World!!! This is inference function on the currently trained model"))

while True:
    i = int(input("enter 1 for inference, 0 for exiting:"))
    if i == 0:
        break
    inp = input("input text, 1 string at a time, for inference:")
    print(inference(inp))